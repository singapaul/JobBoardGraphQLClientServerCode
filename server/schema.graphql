# The Schema and resolvers always need to match
# We write documentation within our schema file

type Query {
  # make all elements of the array non nullable
  job(id: ID!): Job
  jobs(limit: Int, offset: Int): JobSubList
  company(id: ID!): Company
}

type JobSubList {
  items: [Job!]!
  totalCount: Int!
}

type Mutation {
  createJob(input: CreateJobInput!): Job
  deleteJob(id: ID!): Job
  updateJob(input: UpdateJobInput!): Job
}

# GraphQL lets us define our own custom object types as below
# We can specify what fields appear in the object

"""
Represents a job advert posted to our board.
"""
type Job {
  id: ID!
  title: String!
  """
  The __date__ when the job was published, in ISO-8601 format. E.g. '2024-12-31
  """
  date: String!
  description: String
  company: Company!
}

"""
Represents a company type who posts jobs to our board
"""
type Company {
  id: ID!
  name: String!
  description: String
  # This prevents returning a null value for the array
  jobs: [Job!]!
}

input CreateJobInput {
  title: String!
  description: String
}

input UpdateJobInput {
  id: String!
  title: String
  description: String
}
